// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Intercom
import Foundation
@_exported import Intercom
import Intercom_Private
import Swift
import UIKit
import os.log
import os
@objc public protocol HelpCenterStartConversationViewDelegate {
  @objc func didSelectStartConversation()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class HelpCenterStartConversationView : UIKit.UIView {
  @objc weak public var startConversationDelegate: HelpCenterStartConversationViewDelegate?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class HelpCenterDataService : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func fetchCollections(completion: @escaping ([HelpCenterCollection]?, Swift.Error?) -> Swift.Void)
  @objc public func fetchCollection(collectionId: Swift.String, completion: @escaping (HelpCenterCollectionContent?, Swift.Error?) -> Swift.Void)
  @objc public func searchResults(for searchTerm: Swift.String, completion: @escaping ([HelpCenterArticleSearchResult]?, Swift.Error?) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HelpCenterMetricService : ObjectiveC.NSObject {
  @objc public static func addOpenedFromAPIEvent()
  @objc public static func addOpenedArticleFromAPIEvent()
  @objc public static func addOpenedFromConversationEvent()
  @objc public static func addOpenedFromInAppEvent()
  @objc public static func addOpenedFromLegacySearchAppEvent()
  @objc public static func addOpenedFromMessengerHomeAppEvent()
  @objc public static func addOpenedFromCarousel()
  @objc public static func addOpenedFromPushNotification()
  @objc public static func addArticleViewedEvent()
  @objc public static func addArticleFailedEvent(errorCode: Foundation.NSNumber)
  @objc public static func addHappyReactionEvent()
  @objc public static func addNeutralReactionEvent()
  @objc public static func addSadReactionEvent(conversationOptionShown: Swift.Bool)
  @objc public static func addNewConversationFromArticleEvent(accessToTeammate: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol NativeArticleReactionsViewDelegate {
  @objc func selectedReactionIndex(_ reactionIdex: Swift.Int)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NativeArticleReactionsView : UIKit.UIView {
  @objc public static var sadReactionIndex: Swift.Int
  @objc public static var neutralReactionIndex: Swift.Int
  @objc public static var happyReactionIndex: Swift.Int
  @objc weak public var articleDelegate: NativeArticleReactionsViewDelegate?
  @objc deinit
}
extension Intercom {
  public class func fetchHelpCenterCollections(completion: @escaping (Swift.Result<[HelpCenterCollection], ICMHelpCenterDataError>) -> Swift.Void)
  public class func fetchHelpCenterCollection(_ collectionId: Swift.String, completion: @escaping (Swift.Result<HelpCenterCollectionContent, ICMHelpCenterDataError>) -> Swift.Void)
  public class func searchHelpCenter(_ searchTerm: Swift.String, completion: @escaping (Swift.Result<[HelpCenterArticleSearchResult], ICMHelpCenterDataError>) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objc public class HelpCenterContainerViewController : UIKit.UIViewController {
  @objc public convenience init(withCollections collectionIds: [Swift.String])
  @objc public convenience init(withCollection collectionId: Swift.String)
  @objc dynamic public init()
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension HelpCenterContainerViewController : Intercom_Private.ICMErrorViewDelegate {
  @objc dynamic public func didSelectErrorAction()
}
